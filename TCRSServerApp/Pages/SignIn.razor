@page "/sign-in"
@using TCRSServerApp.Models

@inject AppAuthenticationStateProvider AppAuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Sign-in Page</PageTitle>

@if(_isProcessing)
{
    <div class="overlay position-fixed"></div>
    <div class="loading-wrapper position-fixed d-flex justify-content-center align-items-center">
        <div class="loading-text fs-1 text-light">Signing-in...</div>
    </div>
}

<EditForm Model="_model" OnValidSubmit="SignInAsync">
    <DataAnnotationsValidator />
    <div class="container mt-5 d-flex justify-content-center">
        <div class="card" style="width: 40%">
            <div class="card-header">
                <h1>Sign-in</h1>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Username</label>
                    <InputText @bind-Value="_model.Username" class="form-control" placeholder="Enter Username" />
                    <ValidationMessage For="()=> _model.Username" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" @bind-Value="_model.Password" class="form-control" placeholder="Enter Password" />
                    <ValidationMessage For="()=> _model.Password" />
                </div>
                
                @if(!string.IsNullOrWhiteSpace(_error))
                {
                    <p class="text-danger">@_error</p>
                }
                
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success btn-sm btn-primary">Sign-in</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private SignInModel _model = new();

    private bool _isProcessing = false;

    private string _error = null;

    private async Task SignInAsync()
    {
        _error = null;
        _isProcessing = true;

        try
        {
            _error = await AppAuthStateProvider.SignInAsync(_model);

            if(!string.IsNullOrWhiteSpace(_error))
            {
                _isProcessing = false;
            } else
            {
                var signedInUser = AppAuthStateProvider.SignedInUser;

                if(signedInUser.IsEmpty)
                {
                    _error = "Could not Sign-in... Please try again!";

                    _isProcessing = false;
                } else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
        } catch(Exception e)
        {
            _isProcessing = false;
            _error = e.Message;
        }

    }
}
