@using Blazored.TextEditor
@using Microsoft.AspNetCore.Components.Forms

@page "/mngr-sprvsr/manage-content/new"
@page "/mngr-sprvsr/manage-content/edit/{UrlPostId:int?}"

@attribute [Authorize]

@inject CategoryService CategoryService
@inject ContentPostService ContentPostService
@inject AppAuthenticationStateProvider AppAuthStateProvider
@inject NavigationManager NavigationManager
@inject ContentPostService ContentPostService

<PageTitle>Save Content | TCRS App</PageTitle>

<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h3>Save Content</h3>

        <NavLink href="/mngr-sprvsr/manage-content" class="btn btn-primary btn-sm">Back to Manage Content</NavLink>
    </div>

    <div class="spacer-blue"></div>

    <div class="row">
        <div class="col-sm-12">
            @if(_isLoading)
            {
                <div class="d-flex align-items-center">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            } else
            {
                <EditForm Model="model" OnValidSubmit="SaveContentAsync">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label class="form-label">Title: </label>
                        <InputText @bind-Value="model.Title" class="form-control" placeholder="Enter Title" @onblur="OnNameBlur" />
                        <ValidationMessage For="()=> model.Title" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">URL: </label>
                        <InputText @bind-Value="model.Slug" class="form-control" placeholder="Post URL" disabled="@(model.PostId)" />
                        <ValidationMessage For="()=> model.Slug" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Category: </label>
                        <InputSelect @bind-Value="model.CategoryId" class="form-control">
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryId">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=> model.CategoryId" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Content: </label>
                        <BlazoredTextEditor @ref="@quillHtml" Placeholder="Enter Content...">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                                @((MarkupString)model.Content)
                            </EditorContent>
                        </BlazoredTextEditor>
                        <ValidationMessage For="()=> model.Content" />
                    </div>

                    <div class="mb-3">
                        <label for="formFileMultiple" class="form-label">Select your files</label>
                        <InputFile OnChange="@HandleFileUpload" class="form-control" type="file" id="formFileMultiple" multiple />
                    </div>
                    
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <InputCheckbox id="post-publish-check" @bind-Value="model.IsPublished" class="form-check-input" role="switch" />
                            <label class="form-check-label" for="post-publish-check">Publish?</label>
                        </div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <p class="text-danger">@errorMessage</p>
                    }
                    <div class="mb-3 d-flex justify-content-between">
                        <button type="submit" class="btn btn-success mb-3">Save</button>
                        <NavLink href="/mngr-sprvsr/manage-content" class="btn btn-danger mb-3">Cancel</NavLink>
                    </div>
                    <hr />
                </EditForm>
            }
            
            <div class="mb-3"></div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? UrlPostId { get; set; }

    private int PostId => UrlPostId ?? 0;

    private ContentPost post = new ContentPost();

    private bool _isLoading = false;

    private string? errorMessage = null;

    private ContentSaveModel model = new();

    private IEnumerable<Category> categories = Enumerable.Empty<Category>();

    private BlazoredTextEditor? quillHtml;

    protected override async Task OnInitializedAsync()
    {

        var categoriesList = await CategoryService.GetCategoriesAsync();

        if (categoriesList?.Any() == true)
        {
            categories = categoriesList;
        }

        if (PostId > 0)
        {
            var dbModel = await ContentPostService.GetPostAsync(PostId);

            if (dbModel is null)
            {
                errorMessage = "Invalid URL";
            }
            else
            {
                model = dbModel;
            }
        } else
        {
            model = new ContentSaveModel();

            model.CategoryId = 1;
        }
    }

    private void OnNameBlur()
    {
        if (model.PostId == 0 && !string.IsNullOrWhiteSpace(model.Title))
        {
            model.Slug = model.Title.Slugify();
        }
    }

    private async Task SaveContentAsync()
    {
        if(quillHtml != null)
        {
            model.Content = await quillHtml.GetHTML();
        }

        if(string.IsNullOrWhiteSpace(model.Content))
        {
            errorMessage = "Content is required";

            return;
        }

        _isLoading = true;

        try
        {
            var result = await ContentPostService.SaveAsync(model, AppAuthStateProvider.SignedInUser.UserId);

            if(result.Status)
            {
                NavigationManager.NavigateTo("/mngr-sprvsr/manage-content");

                return;
            } else
            {
                errorMessage = result.ErrorMessage ?? "Error in saving post...";

                _isLoading = false;
            }
        } catch (Exception e)
        {
            _isLoading = false;

            errorMessage = e.Message;
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        foreach(var file in e.GetMultipleFiles())
        {
            var fileName = $"{Guid.NewGuid()}-{file.Name}";

            var filePath = Path.Combine("wwwroot/uploads", fileName);

            using var stream = new FileStream(filePath, FileMode.Create);

            await file.OpenReadStream().CopyToAsync(stream);

            post.Files.Add(new FileMetaData { FileName = file.Name, FilePath = filePath });
        }
    }
}