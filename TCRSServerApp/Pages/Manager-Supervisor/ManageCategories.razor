@page "/mngr-sprvsr/manage-categories"

@inject IJSRuntime Js
@inject CategoryService CategoryService

@attribute [Authorize]

<PageTitle>Manage Categories | TCRS App</PageTitle>

<div class="container">
    <div class="d-flex justify-content-between align-items-center">
        <h3>Manage Categories</h3>

        <button class="btn btn-primary btn-sm" @onclick="OpenCategoryFormAsync">+ Add New Category</button>
    </div>
    
    <div class="spacer-blue"></div>

    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>ID</th>
                <th>Name</th>
                <th>Slug</th>
                <th></th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @if (_loading)
            {
                <tr>
                    <td colspan="4">
                        Loading Categories...
                    </td>
                </tr>
            } else if (!_loading && (_categories is null || !_categories.Any()))
            {
                <tr>
                    <td colspan="4">
                        No Categories Found
                    </td>
                </tr>
            } else
            {
                int snum = 1;
                foreach(var category in _categories)
                {
                    <tr>
                        <td>@snum</td>
                        <td>@category.Id</td>
                        <td>@category.Name</td>
                        <td>@category.Slug</td>
                        @if(category.Id != 0)
                        {
                            <td>
                                <button type="button" class="btn btn-primary btn-sm text-decoration-underline" @onclick="()=> EditCategoryAsync(category)">Edit</button>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger btn-sm text-decoration-underline" @onclick="()=> DeleteCategoryAsync(category)">Delete</button>
                            </td>
                        }
                        
                    </tr>

                    snum++;
                }
            }
        </tbody>
    </table>
</div>

<dialog id="@_categoryFormDialog">
    <SaveCategory 
        Category="_categoryModel" 
        OnSaveCategory="OnSaveCategory" 
        OnCloseForm="CloseCategoryFormAsync"/>
</dialog>

@code {
    private const string _categoryFormDialog = "category-form";

    private bool _loading = false;

    private IEnumerable<Category>? _categories = null;

    private Category _categoryModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        _loading = true;

        try
        {
            _categories = await CategoryService.GetCategoriesAsync();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenCategoryFormAsync() =>
        await Js.InvokeVoidAsync("window.openModal", _categoryFormDialog);

    private async Task CloseCategoryFormAsync()
    {
        _categoryModel = new();

        await Js.InvokeVoidAsync("window.closeModal", _categoryFormDialog);
    }

    private async Task EditCategoryAsync(Category category)
    {
        _categoryModel = category.Clone();

        await OpenCategoryFormAsync();
    }

    private async Task DeleteCategoryAsync(Category category)
    {
        await CategoryService.DeleteCategoryAsync(category.Id);

        await LoadCategoriesAsync();
    }

    private async Task OnSaveCategory(MethodResult saveCategoryResult)
    {
        if(saveCategoryResult.Status)
        {
            await LoadCategoriesAsync();

            await CloseCategoryFormAsync();
        } else
        {
            await AlertAsync(saveCategoryResult.ErrorMessage!);
        }
    }

    private async Task AlertAsync(string message)
    {
        await Js.InvokeVoidAsync("window.alert", message);
    }
}
